exp 1: bmi calc:
import React, { useState } from 'react';
import { StyleSheet, Text, View, TextInput, Button } from 'react-native';

export default function App() {
  const [height, setHeight] = useState('');
  const [weight, setWeight] = useState('');
  const [bmi, setBMI] = useState(null);

  const calculateBMI = () => {
    const heightMeters = parseFloat(height) / 100;
    const weightKg = parseFloat(weight);

    if (heightMeters > 0 && weightKg > 0) {
      const bmiValue = weightKg / (heightMeters * heightMeters);
      setBMI(bmiValue.toFixed(2));
    } else {
      setBMI(null);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>BMI Calculator</Text>
      <TextInput
        style={styles.input}
        placeholder="Height (cm)"
        keyboardType="numeric"
        value={height}
        onChangeText={(text) => setHeight(text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Weight (kg)"
        keyboardType="numeric"
        value={weight}
        onChangeText={(text) => setWeight(text)}
      />
      <Button title="Calculate BMI" onPress={calculateBMI} />
      {bmi !== null && (
        <Text style={styles.result}>Your BMI is: {bmi}</Text>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  input: {
    height: 40,
    width: '80%',
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 20,
    paddingLeft: 10,
  },
  result: {
    fontSize: 20,
    marginTop: 20,
  },
});


------------------------------------------------------------------
exp 3: conversion:
import React, { useState } from 'react';
import { View, TextInput, Button, Text } from 'react-native';

const LengthConverterScreen = () => {
  const [inputValue, setInputValue] = useState('');
  const [result, setResult] = useState('');

  const convertToKm = () => {
    const miles = parseFloat(inputValue);
    const km = miles * 1.60934;
    setResult(`${miles} miles = ${km.toFixed(2)} km`);
  };

  const convertToMiles = () => {
    const km = parseFloat(inputValue);
    const miles = km / 1.60934;
    setResult(`${km} km = ${miles.toFixed(2)} miles`);
  };

  return (
    <View>
      <TextInput
        placeholder="Enter value"
        value={inputValue}
        onChangeText={setInputValue}
        keyboardType="numeric"
      />
      <Button title="Convert to Km" onPress={convertToKm} />
      <Button title="Convert to Miles" onPress={convertToMiles} />
      <Text>{result}</Text>
    </View>
  );
};

export default LengthConverterScreen;


---------------------------------------------------------------
exp 4: ToDo:
import React from 'react';
import { StyleSheet, View, Text, TextInput, Button, FlatList } from 'react-native';

export default class App extends React.Component {
  state = { tasks: [], task: '' };

  addTask = () => {
    this.setState(prevState => ({
      tasks: [...prevState.tasks, { id: Date.now(), task: this.state.task }],
      task: ''
    }));
  };

  deleteTask = id => {
    this.setState(prevState => ({
      tasks: prevState.tasks.filter(task => task.id !== id)
    }));
  };

  renderTask = ({ item }) => (
    <View style={styles.task}>
      <Text>{item.task}</Text>
      <Button title="Delete" onPress={() => this.deleteTask(item.id)} />
    </View>
  );

  render() {
    return (
      <View style={styles.container}>
        <TextInput
          style={styles.input}
          placeholder="Add a task"
          value={this.state.task}
          onChangeText={text => this.setState({ task: text })}
        />
        <Button title="Add Task" onPress={this.addTask} />
        <FlatList
          data={this.state.tasks}
          renderItem={this.renderTask}
          keyExtractor={item => item.id.toString()}
        />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    paddingHorizontal: 10,
    marginBottom: 20,
  },
  task: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: 'gray',
  },
});



-------------------------------------------------------------
exp 5: Login page:
import React, { useState } from 'react';
import { View, TextInput, Button, Alert, StyleSheet } from 'react-native';

const LoginScreen = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleReset = () => setUsername('') || setPassword('');
  const handleSubmit = () => (username === 'example' && password === 'password') ? Alert.alert('Login Successful') : Alert.alert('Invalid Credentials');

  return (
    <View style={styles.container}>
      <TextInput style={styles.input} placeholder="Username" value={username} onChangeText={text => setUsername(text)} />
      <TextInput style={styles.input} placeholder="Password" secureTextEntry={true} value={password} onChangeText={text => setPassword(text)} />
      <View style={styles.buttonContainer}>
        <Button title="Reset" onPress={handleReset} />
        <Button title="Submit" onPress={handleSubmit} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20 },
  input: { width: '100%', marginBottom: 10, borderWidth: 1, borderColor: '#ccc', padding: 10 },
  buttonContainer: { flexDirection: 'row', justifyContent: 'space-around', width: '100%' },
});

export default LoginScreen;


-------------------------------------------------------
exp 6: geo location:
import React, { useState, useEffect } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import Geolocation from '@react-native-community/geolocation';

const LocationScreen = () => {
  const [latitude, setLatitude] = useState(null);
  const [longitude, setLongitude] = useState(null);

  useEffect(() => {
    Geolocation.getCurrentPosition(
      position => {
        setLatitude(position.coords.latitude);
        setLongitude(position.coords.longitude);
      },
      error => console.error(error.message),
      { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }
    );
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Latitude: {latitude}</Text>
      <Text style={styles.text}>Longitude: {longitude}</Text>
      <Button title="Refresh Location" onPress={() => {}} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20 },
  text: { marginBottom: 10 },
});

export default LocationScreen;

